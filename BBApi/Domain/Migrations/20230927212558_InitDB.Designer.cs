// <auto-generated />
using System;
using BBDomain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BBDomain.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230927212558_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BBDomain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("PrettyUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PrettyUrl");

                    b.Property<bool>("Static")
                        .HasColumnType("bit")
                        .HasColumnName("Static");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Thumbnail");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BBDomain.Entities.InteriorCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("IdSubCategory")
                        .HasColumnType("int")
                        .HasColumnName("IdSubCategory");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("PrettyUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PrettyUrl");

                    b.Property<bool>("Static")
                        .HasColumnType("bit")
                        .HasColumnName("Static");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Thumbnail");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("IdSubCategory");

                    b.ToTable("InteriorCategory", (string)null);
                });

            modelBuilder.Entity("BBDomain.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryLandingPage")
                        .HasColumnType("int");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableMLSSearch")
                        .HasColumnType("bit");

                    b.Property<string>("HeadLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomePage")
                        .HasColumnType("int");

                    b.Property<string>("MainText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostType")
                        .HasColumnType("int");

                    b.Property<string>("PrettyUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teaser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeaserThubnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeaserThumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UnlockedPost")
                        .HasColumnType("bit");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("BBDomain.Entities.PostCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("IdCategory");

                    b.Property<int?>("IdInteriorCategory")
                        .HasColumnType("int")
                        .HasColumnName("IdInteriorCategory");

                    b.Property<int>("IdPost")
                        .HasColumnType("int")
                        .HasColumnName("IdPost");

                    b.Property<int?>("IdSubCategory")
                        .HasColumnType("int")
                        .HasColumnName("IdSubCategory");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdInteriorCategory");

                    b.HasIndex("IdPost");

                    b.HasIndex("IdSubCategory");

                    b.ToTable("PostCategory", (string)null);
                });

            modelBuilder.Entity("BBDomain.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("IdCategory");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("PrettyUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PrettyUrl");

                    b.Property<bool>("Static")
                        .HasColumnType("bit")
                        .HasColumnName("Static");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Thumbnail");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.ToTable("SubCategory", (string)null);
                });

            modelBuilder.Entity("BBDomain.Entities.InteriorCategory", b =>
                {
                    b.HasOne("BBDomain.Entities.SubCategory", "SubCategory")
                        .WithMany("InteriorCategories")
                        .HasForeignKey("IdSubCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("BBDomain.Entities.PostCategory", b =>
                {
                    b.HasOne("BBDomain.Entities.Category", "Category")
                        .WithMany("PostCategory")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBDomain.Entities.InteriorCategory", "InteriorCategory")
                        .WithMany()
                        .HasForeignKey("IdInteriorCategory");

                    b.HasOne("BBDomain.Entities.Post", "Post")
                        .WithMany("PostCategory")
                        .HasForeignKey("IdPost")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBDomain.Entities.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("IdSubCategory");

                    b.Navigation("Category");

                    b.Navigation("InteriorCategory");

                    b.Navigation("Post");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("BBDomain.Entities.SubCategory", b =>
                {
                    b.HasOne("BBDomain.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BBDomain.Entities.Category", b =>
                {
                    b.Navigation("PostCategory");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("BBDomain.Entities.Post", b =>
                {
                    b.Navigation("PostCategory");
                });

            modelBuilder.Entity("BBDomain.Entities.SubCategory", b =>
                {
                    b.Navigation("InteriorCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
